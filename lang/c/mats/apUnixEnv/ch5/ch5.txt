## Standard I/O Library ##

$ 5.1 Introduction
	def: standard IO lib. handles things like buffer allocation


$ 5.2 Streams and FILE Objects
	def: in ch.3, all IO routines centered on fd's. With the std. IO
			 lib, it centers on streams. When we open/create a file wuth
			 the std. IO lib, we associate a stream with the file.
	
	funcs:
	1. fwide
		 def: sets a stream's orientation
		 ret: pos. int if stream is wide oriented, neg. if stream is
					byte oriented, or 0 if stream has no orientation.
		 nts: 
					- will not change stream orientation if its already set.
					- no error stream.

	- with the ASCII char set, a char is rep'd. by a single byte.
		International char sets, a char is rep'd. by > one byte.
		Stdio can work with both these sets.

	- a stream's orientation det's. whether these chars that are rd
		and wrt'n are single or multibytes ("wide").


$ 5.3 Standard input, standard output, and standard error
	def: three streams predefined and automatically available to
			 a process.
	
	- these streams refer to the same files as the fd's STDIN_FILENO,
		STDOUT_FILENO, and STDERR_FILENO.


$ 5.4 Bufferring
	def: goal is to minimize num. of rd and wrt calls.
	nts: the one aspect of stdio that is confusing is its buffering.
	
	funcs:
		1. fflush
			 def: we can force a stream to be flushed.
			 ret: 0 if ok, EOF on err.
			 nts: any unwritten data for the stream will be passed to
						the kernel. If fp (param) is null, fflush causes all
						output streams to be flushed.

	terms:
		1. flush
			def: wrt'ing of a stdio buffer.
			nts: 2 meanings
				1) for stdio lib, its wrt'ing out the contents of a buffer,
					 which may be partially filled.
				2) for terminal driver, (tcflush func in ch18) it means to
					 discard data that's already stored in the buffer.

	- 3 types of buffering provided:
		1. Fully buffered.
			 def: actual io happens when the stdio buffer is filled.

	 	2. Line buffered.
			 def: stdio lib performs io when a \n is encountered on input
						or output. 

			 nts:
						- This allows us to output a single char at a time, knowing 
							that actual io will only happen when we finish writing
							each line.
						- Typically used on a stream on the terminal--std input,
							std output, for example.
						- 2 caveats
							1) size of buffer stdio uses to collect ea. ln. is fixed;
								 so io might happen when buffer is full before writing
								 a new line.
							2) whenever input is requested through stdio lib from
								 either:
								 		a) an unbuffered stream
								 		b) a line buffered stream,
								 ALL line buffered output streams are flushed.

			3. Unbuffered.
				 def: stdio lib dn buffer the char's.
				 nts:
				 			- ex: if we write 15 char's with stdio func fputs, we expect
								output asap.
							- ex: the std error stream is normally unbuffered. When any
								err msgs occur, they are displayed asap, regardless of
								having a new line.

	- ISO C req's foll. buffer characterisics:
		-> std input and output are fully buffered, only if they do not refer to
			 an interactive device.
		-> std err is never fully buffered. 

	- most impl. default to the foll types of buffering:
		-> std error is always unbuffered.
		-> all other streams are line buffered if they refer to a terminal device;
			 otherwise they are fully buffered.

	- can change the defaults with funcs setbuf and setvbuf. These funcs must be
		called AFTER stream has been opened, but BEFORE any other oper. is
		performed on the stream.
		-> more on these funcs pg. 147


$ Opening a stream

	- funcs
		1. fopen, freopen, fdopen
			 def: funcs that open a stdio stream.
			 ret: fp if ok, null on err.
			 dif:
			 			1. fopen func opens a specified file.
						2. freopen opens specified file on a specified stream, closing the
							 stream first if it is already open. If the stream had an orient,
							 freopen clears it. Typically used to open a specified file as
							 one of the predef streams: std input, std output, or std err.
						3. fdopen takes an exisiting fd, and associates a stdio stream with
							 the descriptor.

		2. fclose
			 def: an open stream is closed by calling fclose.
			 ret: 0 if ok, EOF on error
			 nts:
						- any buffered output data is flushed before file is closed. Any input
							data that may be buffered is discarded.
						- If the stdio lib had auto'ly allo'ed a buffer for the stream, that
							buffer is released.
						- when a process terminates normally, all stdio streams with unwritten
							buffered data are flushed and all opens stdio streams are closed.


$ 5.6 Reading and writing a stream

LO: pg.150/177
